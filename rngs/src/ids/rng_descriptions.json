{
  "Halton Sequence": "The Halton sequence produces tuples of rational numbers between 0 and 1 distributed across any number of dimensions.",
  "Lagged Fibonacci Generator": "An LFG uses a generalized Fibonacci sequence to generate pseudorandom numbers. They are similar to a Linear Feedback Shift Register operating on number rather than bits and like LFSRs selection of parameters has a very strong influence on the quality of the output. A particular kind of LFG is used as part of the VIC cipher from the Cold War.",
  "Linear Congruential Generator": "LCGs are among the simplest forms of pseduorandom number generators using the well known arithmetic operations of multiplication, addition, and division. At each step the current state is multiplied by a constant, then has a constant added, and finally is divided by a constant and the remainder taken. The increment must be coprime to the modulus and the multiplier must be greater than one.",
  "Linear Feedback Shift Register": "LFRSs are simple pseudorandom number generators. A few bits of the state are chosen and XORed together in sequence to produce the next bit, then the oldest bit is dropped.",
  "Mersenne Twister": "The Mersenne Twister (MT19937) algorithm was created in 1997 by Makoto Matsumoto and Takuji Nishimura with the goal of correcting the shortcomings of then popular PRNGs. In particular it is equidistributed in 623 dimensions and has a period of 2^19937-1. The major limitation of MT19937 is its enormous state of 8448 bits, modern PRNGs of comprable quality commonly use 256 bits or less of state. This huge state means that MT19937 cannot be run on small devices and is more difficult to run in parallel. The state size also makes initialization difficult, requiring either a complex key scheduling algorithm to make a key from a single word or a few words or providing 8448 bits. Because the tempering function applied on output is invertible and fixed it is trivial to recover the entire state, making MT19937 inappropriate for cryptographic purposes. A variant MT19937-64 was created for 64-bit computers, it uses the same structure but with slightly different constants.",
  "Middle Square": "The middle square method produces random numbers of a given width, padded on the left with zeroes, by squaring a value and then taking the middle digits as the next value. The quality of these sequences is very low and often falls quickly into short repeating sequences.",
  "Permuted Congruential Generator": "A PCG is a linear congruential generator combined with some non-linear transformation of the state before it is output. In principle many LCGs and transformations are possible but the ones here are suggested by the original PCG paper. For the same reason the state is always 64 bits and the output is always 32 bits, consequently the increment of the underyling LCG must always be odd.",
  "RC4": "The RC4 (Rivest Cipher 4) is a relatively simple stream cipher from 1987, now considered too weak to use. Internally it contains a list of every possible byte and as it runs the list is permuted by swapping positions of bytes. The key is a sequence from 1 to 256 bytes that used to permute the list initially.",
  "Splitmix64": "Splitmix64 is the default PRNG for the Java programming language. It is simple and passes many statistical test but is not considered a strong PRNG in and of itself. It is commonly used as a keying function for other PRNGS when they are likely to be given a seed with low entropy such as a single 64 bit integer. In particular splitmix64 can accept a seed of zero, whereas certain high speed PRNGs cannot.",
  "Weyl Sequence": "The original Weyl squence produces real numbers distributed between 0 and 1 by repeatedly adding an irrational number to the current state and taking the fractional part. For computer purposes Marsaglia defined Weyl sequences as incrementing the state by some value and then taking the remainder when divided by some value coprime to the increment.",
  "Xorshift": "The xorshift family of PRNGs are among the simplest and fastest useful random number generators. They use only the operations of bitwise XOR and bitshifting which are fundamental operations in computer hardware, aiding the speed of execution. The model xorshift here has just 64 bits of state which makes it much easier to examine but practical versions require additional state. Because it uses only shifts and XOR operations if the state of an xorshift generator is zero it will produce only zeroes.",
  "Xoshiro": "The xoshiro family of PRNGs are inspired by the xorshift family but add an improving step to the output. Calculation by the authors also allows these generators to be jumped ahead in order to get another sequence that doesn't overlap."
}