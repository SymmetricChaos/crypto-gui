{
  "BLAKE": "BLAKE was a competitor and finalist for the SHA-3 competition. It uses many of the same constants as SHA-2 but a different internal structure, a hash iterative framework, that eliminates SHA-2's vulernability to length extension attacks. The mixing round of BLAKE is a modified version of the ChaCha cipher.",
  "BLAKE2": "The BLAKE2 family of hash functions were created as drop in replacement for MD5 and SHA-1, which had been broken, with superior speed and security. They are closely related to the original BLAKE family of hash functions which were competitors for the SHA-3 competition. To improve speed over BLAKE the BLAKE2 hashers have fewer compression rounds and pad the input in a simpler way.",
  "BLAKE3": "BLAKE3 is a hash function based on the BLAKE2 family. Unlike BLAKE2 there is only a single BLAKE3 algorithm with different functionality provided by input parameters. It uses a tree construction to allow effectively unlimited parallelism for hashing large inputs.",
  "FNV Hash": "The FNV (Fowler-Noll-Vo) hash family is meant to run very quickly while avoiding collisions but not to provide cryptographic security. Its compression function consits of a single multiplication and a single XOR operation for each byte.",
  "FxHash": "FxHash is inspired by the FNV family of hash functions in its goal of extreme speed. Unlike FNV it takes the message in larger chunks rather than one byte at a time and uses a rotation rather than an XOR.",
  "MD4": "The MD4 hash function, created by Ronald Rivest in 1990, is an obsolete hash algorithm that influenced the design of later hash functions. It produces a 128 bit (16 byte) hash.",
  "MD5": "The MD5 hash function, created by Ronald Rivest in 1991, is among the best known and most widely used in history. It produces a 128 bit (16 byte) hash. Weaknesses were discovered in the algorithm within a few years that resulted in its deprecation for secure purposes. It wasn't until 2004, however, that collisions were discovered. Today MD5 is used to verify message integrity against accidental changes.",
  "Pearson": "Pearson hashing, created by Peter Pearson in 1990, is one of the simplest hashing algorithms. It produces an 8 bit (1 byte) hash. While it runs quickly it has almost no collision resistance and was designed to create hashes for small numbers of short inputs.",
  "Poly1305": "Poly1305 is a universal family of hash functions based on evaluating a polynomial modulo the prime 2^130 - 5. The message is divided into 16 byte blocks which are used to create the coefficients of the polynomial which is evaluated at the point 'r' which serves as the key for the hash. Poly1305 accepts a second key when used a message authenticator. The special value of Poly1305 lies in the fact that a proof exists that when used as an authenticator the security of the system relies only on the security of the cipher (usually AES) used to generate the secondary key.",
  "SHA-1": "SHA-1 is a cryptographic hash function designed by the US National Security Agency, first released is 1995. It produces a 160 bit (20 byte) hash.",
  "SHA-2": "SHA-2 is a family of cryptographic hash funtions designed by the US National Security Agency, each named for the size of the hash they produce in bits. The family is based on two closely related algorithms SHA-256 and SHA-512 with variants of each designed to resist length extension attacks by omitting part of the hash function's state from the output.",
  "SHA-3 (Keccak)": "The winner of the SHA-3 competition by the Amerian NIST was Keccak, an algorithm using a sponge construction.",
  "SipHash": "SipHash is a family of keyed hash functions all of which take a 128 bit (16 byte) key and produce a 64 bit (8 byte) hash. The small hash size is appropriate for use in hash tables but, as a result, carries a higher risk of collisions. While these collisions are unlikely to occur randomly malicious inputs could feasibly produce hundreds of collisions which would cause the hashmap to have severely degraded performance, causing a denial of service attack. The key prevents an attacker from being able to know what the hashes will be making this kind of attack impractical. Each SipHash version is referred to has SipHash-c-d where c is the number of compression rounds and d is the number of finalization rounds. SipHash-2-4 is very common while the slower SipHash-4-8 is more secure. The faster SipHash-1-3 is not kown to be broken but provides little security margin."
}