// based on
// https://datatracker.ietf.org/doc/html/rfc7914.html#section-3

use std::usize;

use itertools::Itertools;
use utils::byte_formatting::{make_u32s_le, u32s_to_bytes_le, ByteFormat};

use crate::{pbkdf2, traits::ClassicHasher};

fn xor_blocks(a: &[u8], b: &[u8]) -> Vec<u8> {
    let mut out = Vec::new();
    for (l, r) in a.iter().zip_eq(b.iter()) {
        out.push(*l ^ *r)
    }
    out
}

macro_rules! salsa {
    ($x: ident, $a: literal, $b: literal, $c: literal, $r: literal) => {
        $x[$a] ^= $x[$b].wrapping_add($x[$c]).rotate_left($r)
    };
}

fn salsa20_8(a: [u8; 64]) -> [u8; 64] {
    let mut x = make_u32s_le::<16>(&a);
    let orig = x.clone();
    for _ in 0..4 {
        salsa!(x, 4, 0, 12, 7);
        salsa!(x, 8, 4, 0, 9);
        salsa!(x, 12, 8, 4, 13);
        salsa!(x, 0, 12, 8, 18);
        salsa!(x, 9, 5, 1, 7);
        salsa!(x, 13, 9, 5, 9);
        salsa!(x, 1, 13, 9, 13);
        salsa!(x, 5, 1, 13, 18);
        salsa!(x, 14, 10, 6, 7);
        salsa!(x, 2, 14, 10, 9);
        salsa!(x, 6, 2, 14, 13);
        salsa!(x, 10, 6, 2, 18);
        salsa!(x, 3, 15, 11, 7);
        salsa!(x, 7, 3, 15, 9);
        salsa!(x, 11, 7, 3, 13);
        salsa!(x, 15, 11, 7, 18);
        salsa!(x, 1, 0, 3, 7);
        salsa!(x, 2, 1, 0, 9);
        salsa!(x, 3, 2, 1, 13);
        salsa!(x, 0, 3, 2, 18);
        salsa!(x, 6, 5, 4, 7);
        salsa!(x, 7, 6, 5, 9);
        salsa!(x, 4, 7, 6, 13);
        salsa!(x, 5, 4, 7, 18);
        salsa!(x, 11, 10, 9, 7);
        salsa!(x, 8, 11, 10, 9);
        salsa!(x, 9, 8, 11, 13);
        salsa!(x, 10, 9, 8, 18);
        salsa!(x, 12, 15, 14, 7);
        salsa!(x, 13, 12, 15, 9);
        salsa!(x, 14, 13, 12, 13);
        salsa!(x, 15, 14, 13, 18);
    }
    for i in 0..16 {
        x[i] = x[i].wrapping_add(orig[i])
    }
    let mut out = [0; 64];
    u32s_to_bytes_le(&mut out, &x);
    out
}

fn block_mix(block: &mut [u8]) {
    let mut y = Vec::new();

    let mut x = [0u8; 64];
    x.copy_from_slice(&block[block.len() - 64..]);

    for chunk in block.chunks(64) {
        let t = xor_blocks(&x, chunk);
        x = salsa20_8(t.try_into().unwrap());
        y.push(x);
    }

    let mut out = Vec::new();
    for even in y.iter().step_by(2) {
        out.extend_from_slice(even);
    }
    for odd in y.iter().skip(1).step_by(2) {
        out.extend_from_slice(odd);
    }
    block.copy_from_slice(&out);
}

// weird operation
// had to copy from here
// https://github.com/RustCrypto/password-hashes/blob/master/scrypt/src/romix.rs
fn integerify(x: &[u8], n: usize) -> usize {
    let mask = n - 1;
    let t = u32::from_le_bytes(x[x.len() - 64..x.len() - 60].try_into().unwrap());
    (t as usize) & mask
}

fn ro_mix(block: &mut [u8], n: usize) {
    let mut x = block.to_vec();
    let mut v = Vec::with_capacity(n);
    for _ in 0..n {
        v.push(x.clone());
        block_mix(&mut x);
    }

    for _ in 0..n {
        let j = integerify(&x, n);
        let mut t = xor_blocks(&x[..], &v[j]);
        block_mix(&mut t);
        x.copy_from_slice(&t);
    }
    block.copy_from_slice(&x);
}

pub struct Scrypt {
    pub input_format: ByteFormat,
    pub output_format: ByteFormat,
    pub salt: Vec<u8>,
    pub cost: u32,             // N
    pub blocksize_factor: u32, // r
    pub parallelism: u32,      // p
    pub key_len: u32,          // dkLen
}

impl Default for Scrypt {
    fn default() -> Self {
        Self {
            input_format: ByteFormat::Utf8,
            output_format: ByteFormat::Hex,
            salt: Vec::new(),
            cost: 2,
            blocksize_factor: 1,
            parallelism: 1,
            key_len: 64,
        }
    }
}

impl Scrypt {
    pub fn input(mut self, input: ByteFormat) -> Self {
        self.input_format = input;
        self
    }

    pub fn output(mut self, output: ByteFormat) -> Self {
        self.output_format = output;
        self
    }

    pub fn salt(mut self, salt: &[u8]) -> Self {
        self.salt = salt.to_vec();
        self
    }

    pub fn cost(mut self, cost: u32) -> Self {
        self.cost = cost;
        self
    }

    pub fn blocksize_factor(mut self, blocksize_factor: u32) -> Self {
        self.blocksize_factor = blocksize_factor;
        self
    }

    pub fn parallelism(mut self, parallelism: u32) -> Self {
        self.parallelism = parallelism;
        self
    }

    pub fn key_len(mut self, key_len: u32) -> Self {
        self.key_len = key_len;
        self
    }

    pub fn direct(passphrase: &[u8], s: &[u8], n: u32, r: u32, p: u32, dklen: u32) -> Vec<u8> {
        Scrypt {
            input_format: ByteFormat::Hex,
            output_format: ByteFormat::Hex,
            salt: s.to_vec(),
            cost: n,
            blocksize_factor: r,
            parallelism: p,
            key_len: dklen,
        }
        .hash(passphrase)
    }
}

impl ClassicHasher for Scrypt {
    fn hash(&self, bytes: &[u8]) -> Vec<u8> {
        let blocksize = 128 * self.blocksize_factor;
        let mut p = pbkdf2::Pbkdf2::sha256()
            .salt(self.salt.clone())
            .iterations(1)
            .hash_len(blocksize * self.parallelism)
            .hash(bytes);

        for block in p.chunks_mut(blocksize as usize) {
            ro_mix(block, self.cost as usize)
        }

        pbkdf2::Pbkdf2::sha256()
            .salt(p)
            .iterations(1)
            .hash_len(self.key_len)
            .hash(bytes)
    }

    crate::hash_bytes_from_string! {}
}

#[cfg(test)]
mod scrypt_tests {
    use super::*;

    #[test]
    fn salsa_function() {
        let input = [
            0x7e, 0x87, 0x9a, 0x21, 0x4f, 0x3e, 0xc9, 0x86, 0x7c, 0xa9, 0x40, 0xe6, 0x41, 0x71,
            0x8f, 0x26, 0xba, 0xee, 0x55, 0x5b, 0x8c, 0x61, 0xc1, 0xb5, 0x0d, 0xf8, 0x46, 0x11,
            0x6d, 0xcd, 0x3b, 0x1d, 0xee, 0x24, 0xf3, 0x19, 0xdf, 0x9b, 0x3d, 0x85, 0x14, 0x12,
            0x1e, 0x4b, 0x5a, 0xc5, 0xaa, 0x32, 0x76, 0x02, 0x1d, 0x29, 0x09, 0xc7, 0x48, 0x29,
            0xed, 0xeb, 0xc6, 0x8d, 0xb8, 0xb8, 0xc2, 0x5e,
        ];
        let output = [
            0xa4, 0x1f, 0x85, 0x9c, 0x66, 0x08, 0xcc, 0x99, 0x3b, 0x81, 0xca, 0xcb, 0x02, 0x0c,
            0xef, 0x05, 0x04, 0x4b, 0x21, 0x81, 0xa2, 0xfd, 0x33, 0x7d, 0xfd, 0x7b, 0x1c, 0x63,
            0x96, 0x68, 0x2f, 0x29, 0xb4, 0x39, 0x31, 0x68, 0xe3, 0xc9, 0xe6, 0xbc, 0xfe, 0x6b,
            0xc5, 0xb7, 0xa0, 0x6d, 0x96, 0xba, 0xe4, 0x24, 0xcc, 0x10, 0x2c, 0x91, 0x74, 0x5c,
            0x24, 0xad, 0x67, 0x3d, 0xc7, 0x61, 0x8f, 0x81,
        ];
        assert_eq!(output, salsa20_8(input))
    }

    #[test]
    fn blockmix_function() {
        let mut input = [
            0xf7, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4, 0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12,
            0xff, 0xdd, 0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e, 0x82, 0x04, 0xf3, 0xae,
            0x2d, 0x0f, 0x6f, 0xad, 0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b, 0xcc, 0x3b,
            0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29, 0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3,
            0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7, 0x89, 0x49, 0x91, 0x44, 0x72, 0x13,
            0xbb, 0x22, 0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb, 0xcd, 0x98, 0x43, 0x80,
            0x37, 0x46, 0x66, 0xbb, 0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0, 0x67, 0xd2,
            0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe, 0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
            0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda, 0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf,
            0x7e, 0x89,
        ];
        let output = [
            0xa4, 0x1f, 0x85, 0x9c, 0x66, 0x08, 0xcc, 0x99, 0x3b, 0x81, 0xca, 0xcb, 0x02, 0x0c,
            0xef, 0x05, 0x04, 0x4b, 0x21, 0x81, 0xa2, 0xfd, 0x33, 0x7d, 0xfd, 0x7b, 0x1c, 0x63,
            0x96, 0x68, 0x2f, 0x29, 0xb4, 0x39, 0x31, 0x68, 0xe3, 0xc9, 0xe6, 0xbc, 0xfe, 0x6b,
            0xc5, 0xb7, 0xa0, 0x6d, 0x96, 0xba, 0xe4, 0x24, 0xcc, 0x10, 0x2c, 0x91, 0x74, 0x5c,
            0x24, 0xad, 0x67, 0x3d, 0xc7, 0x61, 0x8f, 0x81, 0x20, 0xed, 0xc9, 0x75, 0x32, 0x38,
            0x81, 0xa8, 0x05, 0x40, 0xf6, 0x4c, 0x16, 0x2d, 0xcd, 0x3c, 0x21, 0x07, 0x7c, 0xfe,
            0x5f, 0x8d, 0x5f, 0xe2, 0xb1, 0xa4, 0x16, 0x8f, 0x95, 0x36, 0x78, 0xb7, 0x7d, 0x3b,
            0x3d, 0x80, 0x3b, 0x60, 0xe4, 0xab, 0x92, 0x09, 0x96, 0xe5, 0x9b, 0x4d, 0x53, 0xb6,
            0x5d, 0x2a, 0x22, 0x58, 0x77, 0xd5, 0xed, 0xf5, 0x84, 0x2c, 0xb9, 0xf1, 0x4e, 0xef,
            0xe4, 0x25,
        ];
        block_mix(&mut input);
        assert_eq!(input, output);
    }

    #[test]
    fn romix_function() {
        let mut input: [u8; 128] = [
            0xf7, 0xce, 0x0b, 0x65, 0x3d, 0x2d, 0x72, 0xa4, 0x10, 0x8c, 0xf5, 0xab, 0xe9, 0x12,
            0xff, 0xdd, 0x77, 0x76, 0x16, 0xdb, 0xbb, 0x27, 0xa7, 0x0e, 0x82, 0x04, 0xf3, 0xae,
            0x2d, 0x0f, 0x6f, 0xad, 0x89, 0xf6, 0x8f, 0x48, 0x11, 0xd1, 0xe8, 0x7b, 0xcc, 0x3b,
            0xd7, 0x40, 0x0a, 0x9f, 0xfd, 0x29, 0x09, 0x4f, 0x01, 0x84, 0x63, 0x95, 0x74, 0xf3,
            0x9a, 0xe5, 0xa1, 0x31, 0x52, 0x17, 0xbc, 0xd7, 0x89, 0x49, 0x91, 0x44, 0x72, 0x13,
            0xbb, 0x22, 0x6c, 0x25, 0xb5, 0x4d, 0xa8, 0x63, 0x70, 0xfb, 0xcd, 0x98, 0x43, 0x80,
            0x37, 0x46, 0x66, 0xbb, 0x8f, 0xfc, 0xb5, 0xbf, 0x40, 0xc2, 0x54, 0xb0, 0x67, 0xd2,
            0x7c, 0x51, 0xce, 0x4a, 0xd5, 0xfe, 0xd8, 0x29, 0xc9, 0x0b, 0x50, 0x5a, 0x57, 0x1b,
            0x7f, 0x4d, 0x1c, 0xad, 0x6a, 0x52, 0x3c, 0xda, 0x77, 0x0e, 0x67, 0xbc, 0xea, 0xaf,
            0x7e, 0x89,
        ];
        let output: [u8; 128] = [
            0x79, 0xcc, 0xc1, 0x93, 0x62, 0x9d, 0xeb, 0xca, 0x04, 0x7f, 0x0b, 0x70, 0x60, 0x4b,
            0xf6, 0xb6, 0x2c, 0xe3, 0xdd, 0x4a, 0x96, 0x26, 0xe3, 0x55, 0xfa, 0xfc, 0x61, 0x98,
            0xe6, 0xea, 0x2b, 0x46, 0xd5, 0x84, 0x13, 0x67, 0x3b, 0x99, 0xb0, 0x29, 0xd6, 0x65,
            0xc3, 0x57, 0x60, 0x1f, 0xb4, 0x26, 0xa0, 0xb2, 0xf4, 0xbb, 0xa2, 0x00, 0xee, 0x9f,
            0x0a, 0x43, 0xd1, 0x9b, 0x57, 0x1a, 0x9c, 0x71, 0xef, 0x11, 0x42, 0xe6, 0x5d, 0x5a,
            0x26, 0x6f, 0xdd, 0xca, 0x83, 0x2c, 0xe5, 0x9f, 0xaa, 0x7c, 0xac, 0x0b, 0x9c, 0xf1,
            0xbe, 0x2b, 0xff, 0xca, 0x30, 0x0d, 0x01, 0xee, 0x38, 0x76, 0x19, 0xc4, 0xae, 0x12,
            0xfd, 0x44, 0x38, 0xf2, 0x03, 0xa0, 0xe4, 0xe1, 0xc4, 0x7e, 0xc3, 0x14, 0x86, 0x1f,
            0x4e, 0x90, 0x87, 0xcb, 0x33, 0x39, 0x6a, 0x68, 0x73, 0xe8, 0xf9, 0xd2, 0x53, 0x9a,
            0x4b, 0x8e,
        ];
        ro_mix(&mut input, 16);
        assert_eq!(input, output);
    }
}

crate::basic_hash_tests!(
    test1, Scrypt::default().cost(16), "", "77d6576238657b203b19ca42c18a0497f16b4844e3074ae8dfdffa3fede21442fcd0069ded0948f8326a753a0fc81f17e8d3e0fb2e0d3628cf35e20c38d18906";
    test2, Scrypt::default().salt(b"NaCl").cost(1024).blocksize_factor(8).parallelism(16), "password", "fdbabe1c9d3472007856e7190d01e9fe7c6ad7cbc8237830e77376634b3731622eaf30d92e22a3886ff109279d9830dac727afb94a83ee6d8360cbdfa2cc0640";
);
