use super::block_cipher::{BCMode, BCPadding, BlockCipher};
use utils::byte_formatting::ByteFormat;
macro_rules! lea_struct {
    ($name: ident, $key_words: literal, $num_rounds: literal) => {
        pub struct $name {
            pub input_format: ByteFormat,
            pub output_format: ByteFormat,
            pub mode: BCMode,
            pub padding: BCPadding,
            pub iv: u128,
            subkeys: [u32; 6],
        }

        impl $name {
            pub fn ksa(&mut self, key: [u32; $key_words]) {}

            pub fn with_ksa(mut self, key: [u32; $key_words]) -> Self {
                self.ksa(key);
                self
            }
        }

        impl BlockCipher<16> for $name {
            fn encrypt_block(&self, bytes: &mut [u8]) {
                todo!()
            }

            fn decrypt_block(&self, bytes: &mut [u8]) {
                todo!()
            }
        }
    };
}

lea_struct!(Lea128, 4, 24);
crate::impl_cipher_for_block_cipher!(Lea128, 16);

lea_struct!(Lea192, 6, 28);
crate::impl_cipher_for_block_cipher!(Lea192, 16);

lea_struct!(Lea256, 8, 32);
crate::impl_cipher_for_block_cipher!(Lea256, 16);

// crate::test_block_cipher!(
//     // key: 0x0f,0x1e,0x2d,0x3c,0x4b,0x5a,0x69,0x78,0x87,0x96,0xa5,0xb4,0xc3,0xd2,0xe1,0xf0
//     Lea128::default().with_ksa([0, 0, 0, 0]), test_1,
//     [0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f],
//     [0x9f,0xc8,0x4e,0x35,0x28,0xc6,0xc6,0x18,0x55,0x32,0xc7,0xa7,0x04,0x64,0x8b,0xfd];

//     // key: 0x0f,0x1e,0x2d,0x3c,0x4b,0x5a,0x69,0x78,0x87,0x96,0xa5,0xb4,0xc3,0xd2,0xe1,0xf0,0xf0,0xe1,0xd2,0xc3,0xb4,0xa5,0x96,0x87
//     Lea192::default().with_ksa([0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f]), test_2,
//     [0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f],
//     [0x6f,0xb9,0x5e,0x32,0x5a,0xad,0x1b,0x87,0x8c,0xdc,0xf5,0x35,0x76,0x74,0xc6,0xf2];

//     // key: 0x0f,0x1e,0x2d,0x3c,0x4b,0x5a,0x69,0x78,0x87,0x96,0xa5,0xb4,0xc3,0xd2,0xe1,0xf0,0xf0,0xe1,0xd2,0xc3,0xb4,0xa5,0x96,0x87,0x78,0x69,0x5a,0x4b,0x3c,0x2d,0x1e,0x0f
//     Lea256::default().with_ksa([0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f]), test_3,
//     [0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f],
//     [0xd6,0x51,0xaf,0xf6,0x47,0xb1,0x89,0xc1,0x3a,0x89,0x00,0xca,0x27,0xf9,0xe1,0x97];
// );
