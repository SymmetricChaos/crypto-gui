use utils::byte_formatting::ByteFormat;

use super::block_cipher::{BCMode, BCPadding, BlockCipher};

const SIGMA: [u64; 6] = [
    0xa09e667f3bcc908b,
    0xb67ae8584caa73b2,
    0xc6ef372fe94f82be,
    0x54ff53a5f1d36f1c,
    0x10e527fade682d1d,
    0xb05688c2b3e6c1fd,
];

const SBOXES: [[u8; 256]; 4] = [
    [
        112, 130, 44, 236, 179, 39, 192, 229, 228, 133, 87, 53, 234, 12, 174, 65, 35, 239, 107,
        147, 69, 25, 165, 33, 237, 14, 79, 78, 29, 101, 146, 189, 134, 184, 175, 143, 124, 235, 31,
        206, 62, 48, 220, 95, 94, 197, 11, 26, 166, 225, 57, 202, 213, 71, 93, 61, 217, 1, 90, 214,
        81, 86, 108, 77, 139, 13, 154, 102, 251, 204, 176, 45, 116, 18, 43, 32, 240, 177, 132, 153,
        223, 76, 203, 194, 52, 126, 118, 5, 109, 183, 169, 49, 209, 23, 4, 215, 20, 88, 58, 97,
        222, 27, 17, 28, 50, 15, 156, 22, 83, 24, 242, 34, 254, 68, 207, 178, 195, 181, 122, 145,
        36, 8, 232, 168, 96, 252, 105, 80, 170, 208, 160, 125, 161, 137, 98, 151, 84, 91, 30, 149,
        224, 255, 100, 210, 16, 196, 0, 72, 163, 247, 117, 219, 138, 3, 230, 218, 9, 63, 221, 148,
        135, 92, 131, 2, 205, 74, 144, 51, 115, 103, 246, 243, 157, 127, 191, 226, 82, 155, 216,
        38, 200, 55, 198, 59, 129, 150, 111, 75, 19, 190, 99, 46, 233, 121, 167, 140, 159, 110,
        188, 142, 41, 245, 249, 182, 47, 253, 180, 89, 120, 152, 6, 106, 231, 70, 113, 186, 212,
        37, 171, 66, 136, 162, 141, 250, 114, 7, 185, 85, 248, 238, 172, 10, 54, 73, 42, 104, 60,
        56, 241, 164, 64, 40, 211, 123, 187, 201, 67, 193, 21, 227, 173, 244, 119, 199, 128, 158,
    ],
    [
        224, 5, 88, 217, 103, 78, 129, 203, 201, 11, 174, 106, 213, 24, 93, 130, 70, 223, 214, 39,
        138, 50, 75, 66, 219, 28, 158, 156, 58, 202, 37, 123, 13, 113, 95, 31, 248, 215, 62, 157,
        124, 96, 185, 190, 188, 139, 22, 52, 77, 195, 114, 149, 171, 142, 186, 122, 179, 2, 180,
        173, 162, 172, 216, 154, 23, 26, 53, 204, 247, 153, 97, 90, 232, 36, 86, 64, 225, 99, 9,
        51, 191, 152, 151, 133, 104, 252, 236, 10, 218, 111, 83, 98, 163, 46, 8, 175, 40, 176, 116,
        194, 189, 54, 34, 56, 100, 30, 57, 44, 166, 48, 229, 68, 253, 136, 159, 101, 135, 107, 244,
        35, 72, 16, 209, 81, 192, 249, 210, 160, 85, 161, 65, 250, 67, 19, 196, 47, 168, 182, 60,
        43, 193, 255, 200, 165, 32, 137, 0, 144, 71, 239, 234, 183, 21, 6, 205, 181, 18, 126, 187,
        41, 15, 184, 7, 4, 155, 33, 148, 102, 230, 206, 237, 231, 59, 254, 127, 197, 164, 55, 177,
        76, 145, 110, 141, 118, 3, 45, 222, 150, 38, 125, 198, 92, 211, 242, 79, 25, 63, 220, 121,
        29, 82, 235, 243, 109, 94, 251, 105, 178, 240, 49, 12, 212, 207, 140, 226, 117, 169, 74,
        87, 132, 17, 69, 27, 245, 228, 14, 115, 170, 241, 221, 89, 20, 108, 146, 84, 208, 120, 112,
        227, 73, 128, 80, 167, 246, 119, 147, 134, 131, 42, 199, 91, 233, 238, 143, 1, 61,
    ],
    [
        56, 65, 22, 118, 217, 147, 96, 242, 114, 194, 171, 154, 117, 6, 87, 160, 145, 247, 181,
        201, 162, 140, 210, 144, 246, 7, 167, 39, 142, 178, 73, 222, 67, 92, 215, 199, 62, 245,
        143, 103, 31, 24, 110, 175, 47, 226, 133, 13, 83, 240, 156, 101, 234, 163, 174, 158, 236,
        128, 45, 107, 168, 43, 54, 166, 197, 134, 77, 51, 253, 102, 88, 150, 58, 9, 149, 16, 120,
        216, 66, 204, 239, 38, 229, 97, 26, 63, 59, 130, 182, 219, 212, 152, 232, 139, 2, 235, 10,
        44, 29, 176, 111, 141, 136, 14, 25, 135, 78, 11, 169, 12, 121, 17, 127, 34, 231, 89, 225,
        218, 61, 200, 18, 4, 116, 84, 48, 126, 180, 40, 85, 104, 80, 190, 208, 196, 49, 203, 42,
        173, 15, 202, 112, 255, 50, 105, 8, 98, 0, 36, 209, 251, 186, 237, 69, 129, 115, 109, 132,
        159, 238, 74, 195, 46, 193, 1, 230, 37, 72, 153, 185, 179, 123, 249, 206, 191, 223, 113,
        41, 205, 108, 19, 100, 155, 99, 157, 192, 75, 183, 165, 137, 95, 177, 23, 244, 188, 211,
        70, 207, 55, 94, 71, 148, 250, 252, 91, 151, 254, 90, 172, 60, 76, 3, 53, 243, 35, 184, 93,
        106, 146, 213, 33, 68, 81, 198, 125, 57, 131, 220, 170, 124, 119, 86, 5, 27, 164, 21, 52,
        30, 28, 248, 82, 32, 20, 233, 189, 221, 228, 161, 224, 138, 241, 214, 122, 187, 227, 64,
        79,
    ],
    [
        112, 44, 179, 192, 228, 87, 234, 174, 35, 107, 69, 165, 237, 79, 29, 146, 134, 175, 124,
        31, 62, 220, 94, 11, 166, 57, 213, 93, 217, 90, 81, 108, 139, 154, 251, 176, 116, 43, 240,
        132, 223, 203, 52, 118, 109, 169, 209, 4, 20, 58, 222, 17, 50, 156, 83, 242, 254, 207, 195,
        122, 36, 232, 96, 105, 170, 160, 161, 98, 84, 30, 224, 100, 16, 0, 163, 117, 138, 230, 9,
        221, 135, 131, 205, 144, 115, 246, 157, 191, 82, 216, 200, 198, 129, 111, 19, 99, 233, 167,
        159, 188, 41, 249, 47, 180, 120, 6, 231, 113, 212, 171, 136, 141, 114, 185, 248, 172, 54,
        42, 60, 241, 64, 211, 187, 67, 21, 173, 119, 128, 130, 236, 39, 229, 133, 53, 12, 65, 239,
        147, 25, 33, 14, 78, 101, 189, 184, 143, 235, 206, 48, 95, 197, 26, 225, 202, 71, 61, 1,
        214, 86, 77, 13, 102, 204, 45, 18, 32, 177, 153, 76, 194, 126, 5, 183, 49, 23, 215, 88, 97,
        27, 28, 15, 22, 24, 34, 68, 178, 181, 145, 8, 168, 252, 80, 208, 125, 137, 151, 91, 149,
        255, 210, 196, 72, 247, 219, 3, 218, 63, 148, 92, 2, 74, 51, 103, 243, 127, 226, 155, 38,
        55, 59, 150, 75, 190, 46, 121, 140, 110, 142, 245, 182, 253, 89, 152, 106, 70, 186, 37, 66,
        162, 250, 7, 85, 238, 10, 73, 104, 56, 164, 40, 123, 201, 193, 227, 244, 199, 158,
    ],
];

fn f(a: u64, k: u64) -> u64 {
    p(s(a ^ k))
}

fn fl(a: u64, k: u64) -> u64 {
    let al = (a >> 32) as u32;
    let ar = a as u32;
    let kl = (k >> 32) as u32;
    let kr = k as u32;
    let yr = (al & kl).rotate_left(1) ^ ar;
    let yl = (yr | kr) ^ al;
    (yl as u64) << 32 | yr as u64
}

fn fl_inv(a: u64, k: u64) -> u64 {
    let al = (a >> 32) as u32;
    let ar = a as u32;
    let kl = (k >> 32) as u32;
    let kr = k as u32;
    let xl = (ar | kr) ^ al;
    let xr = (xl & kl).rotate_left(1) ^ ar;
    (xl as u64) << 32 | xr as u64
}

fn sbox(a: u8, n: usize) -> u8 {
    SBOXES[n][a as usize]
}

fn s(a: u64) -> u64 {
    let b = a.to_be_bytes();
    u64::from_be_bytes([
        sbox(b[0], 0),
        sbox(b[1], 1),
        sbox(b[2], 2),
        sbox(b[3], 3),
        sbox(b[4], 1),
        sbox(b[5], 2),
        sbox(b[6], 3),
        sbox(b[7], 0),
    ])
}

fn p(a: u64) -> u64 {
    let b = a.to_be_bytes();
    u64::from_be_bytes([
        b[0] ^ b[2] ^ b[3] ^ b[5] ^ b[6] ^ b[7],
        b[0] ^ b[1] ^ b[3] ^ b[4] ^ b[6] ^ b[7],
        b[0] ^ b[1] ^ b[2] ^ b[4] ^ b[5] ^ b[7],
        b[1] ^ b[2] ^ b[3] ^ b[4] ^ b[5] ^ b[6],
        b[0] ^ b[1] ^ b[5] ^ b[6] ^ b[7],
        b[1] ^ b[2] ^ b[4] ^ b[6] ^ b[7],
        b[2] ^ b[3] ^ b[4] ^ b[5] ^ b[7],
        b[0] ^ b[3] ^ b[4] ^ b[5] ^ b[6],
    ])
}

fn create_ka(kl: (u64, u64), kr: (u64, u64)) -> (u64, u64) {
    let mut t0 = kl.0 ^ kr.0;
    let mut t1 = kl.1 ^ kr.1;
    t1 ^= f(t0, SIGMA[0]);
    t0 ^= f(t1, SIGMA[1]);
    t0 ^= kl.0;
    t1 ^= kl.1;
    t1 ^= f(t0, SIGMA[2]);
    t0 ^= f(t1, SIGMA[3]);
    (t0, t1)
}

fn create_kb(kr: (u64, u64), ka: (u64, u64)) -> (u64, u64) {
    let mut t0 = kr.0 ^ ka.0;
    let mut t1 = kr.1 ^ ka.1;
    t1 ^= f(t0, SIGMA[4]);
    t0 ^= f(t1, SIGMA[5]);
    (t0, t1)
}

// Taken from: https://docs.rs/camellia/latest/src/camellia/camellia.rs.html#350
/// Performs rotate left and taking the higher-half of it.
fn rotate_left_hi(val: (u64, u64), mut shift: u8) -> u64 {
    if shift >= 64 {
        shift -= 64;
    }

    (val.0 << shift) | (val.1 >> (64 - shift))
}

/// Performs rotate left and taking the lower-half of it.
fn rotate_left_lo(val: (u64, u64), mut shift: u8) -> u64 {
    if shift >= 64 {
        shift -= 64;
    }

    (val.0 >> (64 - shift)) | (val.1 << shift)
}

pub struct Camellia128 {
    pub input_format: ByteFormat,
    pub output_format: ByteFormat,
    pub subkeys: [u64; 26],
    pub iv: u64,
    pub mode: BCMode,
    pub padding: BCPadding,
}

impl Default for Camellia128 {
    fn default() -> Self {
        Self {
            input_format: ByteFormat::Hex,
            output_format: ByteFormat::Hex,
            subkeys: [0; 26],
            iv: 0,
            mode: Default::default(),
            padding: Default::default(),
        }
    }
}

impl Camellia128 {
    pub fn ksa(&mut self, bytes: [u8; 16]) {
        let kl = (
            u64::from_be_bytes(bytes[0..8].try_into().unwrap()),
            u64::from_be_bytes(bytes[8..16].try_into().unwrap()),
        );
        let ka = create_ka(kl, (0, 0));

        self.subkeys[0] = kl.0;
        self.subkeys[1] = kl.1;
        self.subkeys[2] = ka.0;
        self.subkeys[3] = ka.1;
        self.subkeys[4] = rotate_left_hi(kl, 15);
        self.subkeys[5] = rotate_left_lo(kl, 15);
        self.subkeys[6] = rotate_left_hi(ka, 15);
        self.subkeys[7] = rotate_left_lo(ka, 15);

        self.subkeys[8] = rotate_left_hi(ka, 30);
        self.subkeys[9] = rotate_left_lo(ka, 30);

        self.subkeys[10] = rotate_left_hi(kl, 45);
        self.subkeys[11] = rotate_left_lo(kl, 45);
        self.subkeys[12] = rotate_left_hi(ka, 45);
        self.subkeys[13] = rotate_left_lo(kl, 60);
        self.subkeys[14] = rotate_left_hi(ka, 60);
        self.subkeys[15] = rotate_left_lo(ka, 60);

        self.subkeys[16] = rotate_left_lo(kl, 77);
        self.subkeys[17] = rotate_left_hi(kl, 77);

        self.subkeys[18] = rotate_left_lo(kl, 94);
        self.subkeys[19] = rotate_left_hi(kl, 94);
        self.subkeys[20] = rotate_left_lo(ka, 94);
        self.subkeys[21] = rotate_left_hi(ka, 94);
        self.subkeys[22] = rotate_left_lo(kl, 111);
        self.subkeys[23] = rotate_left_hi(kl, 111);

        self.subkeys[24] = rotate_left_lo(ka, 111);
        self.subkeys[25] = rotate_left_hi(ka, 111);
    }

    pub fn with_key(mut self, bytes: [u8; 16]) -> Self {
        self.ksa(bytes);
        self
    }
}

impl BlockCipher<8> for Camellia128 {
    fn encrypt_block(&self, bytes: &mut [u8]) {
        todo!()
    }

    fn decrypt_block(&self, bytes: &mut [u8]) {
        todo!()
    }
}

#[cfg(test)]
mod camellia_tests {

    use super::*;
}

crate::test_block_cipher!(
    Camellia128::default().with_key(
        [0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10]
    ), test_1,
    [0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10],
    [0x67, 0x67, 0x31, 0x38, 0x54, 0x96, 0x69, 0x73, 0x08, 0x57, 0x06, 0x56, 0x48, 0xea, 0xbe, 0x43];
);
