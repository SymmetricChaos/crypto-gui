use utils::byte_formatting::ByteFormat;

// https://cr.yp.to/snuffle/salsafamily-20071225.pdf
pub struct Salsa20 {
    pub input_format: ByteFormat,
    pub output_format: ByteFormat,
    pub key: [u32; 8],
    pub nonce: [u32; 2],
    pub rounds: u8,
}

impl Default for Salsa20 {
    fn default() -> Self {
        Self {
            input_format: ByteFormat::Hex,
            output_format: ByteFormat::Hex,
            key: [
                0x04030201, 0x08070605, 0x0c0b0a09, 0x100f0e0d, 0x14131211, 0x18171615, 0x1c1b1a19,
                0x201f1e1d,
            ],
            nonce: [0x01040103, 0x06020905],
            rounds: 20,
        }
    }
}

impl Salsa20 {
    pub fn with_key(mut self, key: [u32; 8]) -> Self {
        self.key = key;
        self
    }

    pub fn with_nonce(mut self, nonce: [u32; 2]) -> Self {
        self.nonce = nonce;
        self
    }

    pub fn salsa20_8() -> Self {
        Self {
            rounds: 8,
            ..Default::default()
        }
    }

    pub fn salsa20_12() -> Self {
        Self {
            rounds: 12,
            ..Default::default()
        }
    }

    pub fn salsa20_20() -> Self {
        Self {
            rounds: 20,
            ..Default::default()
        }
    }

    pub fn create_state(&self, ctr: u64) -> [u32; 16] {
        [
            0x61707865,
            self.key[0],
            self.key[1],
            self.key[2],
            self.key[3],
            0x3320646e,
            self.nonce[0],
            self.nonce[1],
            ctr as u32,
            (ctr >> 32) as u32,
            0x79622d32,
            self.key[4],
            self.key[5],
            self.key[6],
            self.key[7],
            0x6b206574,
        ]
    }

    pub fn quarter_round(state: &mut [u32; 16], a: usize, b: usize, c: usize, d: usize) {
        state[b] ^= (state[a].wrapping_add(state[d])).rotate_left(7);
        state[c] ^= (state[b].wrapping_add(state[a])).rotate_left(9);
        state[d] ^= (state[c].wrapping_add(state[b])).rotate_left(13);
        state[a] ^= (state[d].wrapping_add(state[c])).rotate_left(18);
    }

    // Acts on columns
    pub fn odd_round(state: &mut [u32; 16]) {
        Self::quarter_round(state, 0, 4, 8, 12);
        Self::quarter_round(state, 5, 9, 13, 1);
        Self::quarter_round(state, 10, 14, 2, 6);
        Self::quarter_round(state, 15, 3, 7, 11);
    }

    // Acts on rows
    pub fn even_round(state: &mut [u32; 16]) {
        Self::quarter_round(state, 0, 1, 2, 3);
        Self::quarter_round(state, 5, 6, 7, 4);
        Self::quarter_round(state, 10, 11, 8, 9);
        Self::quarter_round(state, 15, 12, 13, 14);
    }

    pub fn double_round(state: &mut [u32; 16]) {
        // Odd rounds first as the specification counts from one
        Self::odd_round(state);
        Self::even_round(state);
    }

    pub fn encrypt_bytes(&self, bytes: &[u8]) -> Vec<u8> {
        let mut ctr = 0_u64;
        let mut out = Vec::new();
        let mut state = [
            0x61707865,
            self.key[0],
            self.key[1],
            self.key[2],
            self.key[3],
            0x3320646e,
            self.nonce[0],
            self.nonce[1],
            0x00000000,
            0x00000000,
            0x79622d32,
            self.key[4],
            self.key[5],
            self.key[6],
            self.key[7],
            0x6b206574,
        ];

        for block in bytes.chunks(64) {
            // Mix the counter into the state
            state[8] = ctr as u32; // low bits, "as" cast truncates
            state[9] = (ctr >> 32) as u32; // high bits

            // Temporary state
            let mut t_state = state.clone();

            // Only Salsa20/20, Salsa20/12, and Salsa20/8 are official but any number is usable
            for _round in 0..self.rounds / 2 {
                Self::double_round(&mut t_state);
            }
            if self.rounds % 2 == 1 {
                Self::odd_round(&mut t_state)
            }

            // XOR the current state into the temporary state
            for (i, word) in t_state.iter_mut().enumerate() {
                *word = word.wrapping_add(state[i])
            }

            // Create a byte stream
            let key_steam = t_state.iter().flat_map(|w| w.to_le_bytes());

            for (input_byte, key_byte) in block.iter().zip(key_steam) {
                out.push(*input_byte ^ key_byte)
            }

            ctr += 1;
        }

        out
    }
}

crate::impl_cipher_for_stream_cipher!(Salsa20);

#[cfg(test)]
mod salsa20_tests {

    use super::*;

    use crate::Cipher;

    #[test]
    fn encrypt_decrypt_test() {
        let ptext = "0102030405060708";
        let cipher = Salsa20::default();

        let ctext = cipher.encrypt(ptext).unwrap();
        assert_eq!(cipher.decrypt(&ctext).unwrap(), ptext);
    }

    // #[test]
    // fn test_core() {
    //     let input = [
    //         0x7e, 0x87, 0x9a, 0x21, 0x4f, 0x3e, 0xc9, 0x86, 0x7c, 0xa9, 0x40, 0xe6, 0x41, 0x71,
    //         0x8f, 0x26, 0xba, 0xee, 0x55, 0x5b, 0x8c, 0x61, 0xc1, 0xb5, 0x0d, 0xf8, 0x46, 0x11,
    //         0x6d, 0xcd, 0x3b, 0x1d, 0xee, 0x24, 0xf3, 0x19, 0xdf, 0x9b, 0x3d, 0x85, 0x14, 0x12,
    //         0x1e, 0x4b, 0x5a, 0xc5, 0xaa, 0x32, 0x76, 0x02, 0x1d, 0x29, 0x09, 0xc7, 0x48, 0x29,
    //         0xed, 0xeb, 0xc6, 0x8d, 0xb8, 0xb8, 0xc2, 0x5e,
    //     ];
    //     let output = [
    //         0xa4, 0x1f, 0x85, 0x9c, 0x66, 0x08, 0xcc, 0x99, 0x3b, 0x81, 0xca, 0xcb, 0x02, 0x0c,
    //         0xef, 0x05, 0x04, 0x4b, 0x21, 0x81, 0xa2, 0xfd, 0x33, 0x7d, 0xfd, 0x7b, 0x1c, 0x63,
    //         0x96, 0x68, 0x2f, 0x29, 0xb4, 0x39, 0x31, 0x68, 0xe3, 0xc9, 0xe6, 0xbc, 0xfe, 0x6b,
    //         0xc5, 0xb7, 0xa0, 0x6d, 0x96, 0xba, 0xe4, 0x24, 0xcc, 0x10, 0x2c, 0x91, 0x74, 0x5c,
    //         0x24, 0xad, 0x67, 0x3d, 0xc7, 0x61, 0x8f, 0x81,
    //     ];

    //     for i in 0..4 {
    //         Salsa20::double_round(state);
    //     }

    // }

    #[test]
    fn state_test() {
        let cipher = Salsa20::default();
        let state = cipher.create_state(7);
        let mut t_state = state.clone();

        assert_eq!(
            t_state,
            [
                0x61707865, 0x04030201, 0x08070605, 0x0c0b0a09, 0x100f0e0d, 0x3320646e, 0x01040103,
                0x06020905, 0x00000007, 0x00000000, 0x79622d32, 0x14131211, 0x18171615, 0x1c1b1a19,
                0x201f1e1d, 0x6b206574
            ]
        );

        for _ in 0..10 {
            Salsa20::double_round(&mut t_state);
        }

        assert_eq!(
            t_state,
            [
                0x58318d3e, 0x0292df4f, 0xa28d8215, 0xa1aca723, 0x697a34c7, 0xf2f00ba8, 0x63e9b0a1,
                0x27250e3a, 0xb1c7f1f3, 0x62066edc, 0x66d3ccf1, 0xb0365cf3, 0x091ad09e, 0x64f0c40f,
                0xd60d95ea, 0x00be78c9
            ]
        );

        for (i, word) in t_state.iter_mut().enumerate() {
            *word = word.wrapping_add(state[i])
        }

        assert_eq!(
            t_state,
            [
                0xb9a205a3, 0x0695e150, 0xaa94881a, 0xadb7b12c, 0x798942d4, 0x26107016, 0x64edb1a4,
                0x2d27173f, 0xb1c7f1fa, 0x62066edc, 0xe035fa23, 0xc4496f04, 0x2131e6b3, 0x810bde28,
                0xf62cb407, 0x6bdede3d
            ]
        );
    }

    macro_rules! test_keystream {
        ($name: ident, $key: expr, $nonce: expr, $reference: expr) => {
            #[test]
            fn $name() {
                let cipher = Salsa20::salsa20_20().with_key($key).with_nonce($nonce);
                let reference: [u8; 256] = $reference;
                let stream = cipher.encrypt_bytes(&[0; 512]);
                assert_eq!(&reference[0..64], &stream[0..64]);
                assert_eq!(&reference[64..128], &stream[192..256]);
                assert_eq!(&reference[128..192], &stream[256..320]);
                assert_eq!(&reference[192..256], &stream[448..512]);
            }
        };
    }

    // https://github.com/das-labor/legacy/blob/master/microcontroller-2/arm-crypto-lib/testvectors/salsa20-256.64-verified.test-vectors
    test_keystream!(
        test_1,
        [0x000000080, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0],
        [
            0xe3, 0xbe, 0x8f, 0xdd, 0x8b, 0xec, 0xa2, 0xe3, 0xea, 0x8e, 0xf9, 0x47, 0x5b, 0x29,
            0xa6, 0xe7, 0x00, 0x39, 0x51, 0xe1, 0x09, 0x7a, 0x5c, 0x38, 0xd2, 0x3b, 0x7a, 0x5f,
            0xad, 0x9f, 0x68, 0x44, 0xb2, 0x2c, 0x97, 0x55, 0x9e, 0x27, 0x23, 0xc7, 0xcb, 0xbd,
            0x3f, 0xe4, 0xfc, 0x8d, 0x9a, 0x07, 0x44, 0x65, 0x2a, 0x83, 0xe7, 0x2a, 0x9c, 0x46,
            0x18, 0x76, 0xaf, 0x4d, 0x7e, 0xf1, 0xa1, 0x17, 0x57, 0xbe, 0x81, 0xf4, 0x7b, 0x17,
            0xd9, 0xae, 0x7c, 0x4f, 0xf1, 0x54, 0x29, 0xa7, 0x3e, 0x10, 0xac, 0xf2, 0x50, 0xed,
            0x3a, 0x90, 0xa9, 0x3c, 0x71, 0x13, 0x08, 0xa7, 0x4c, 0x62, 0x16, 0xa9, 0xed, 0x84,
            0xcd, 0x12, 0x6d, 0xa7, 0xf2, 0x8e, 0x8a, 0xbf, 0x8b, 0xb6, 0x35, 0x17, 0xe1, 0xca,
            0x98, 0xe7, 0x12, 0xf4, 0xfb, 0x2e, 0x1a, 0x6a, 0xed, 0x9f, 0xdc, 0x73, 0x29, 0x1f,
            0xaa, 0x17, 0x95, 0x82, 0x11, 0xc4, 0xba, 0x2e, 0xbd, 0x58, 0x38, 0xc6, 0x35, 0xed,
            0xb8, 0x1f, 0x51, 0x3a, 0x91, 0xa2, 0x94, 0xe1, 0x94, 0xf1, 0xc0, 0x39, 0xae, 0xec,
            0x65, 0x7d, 0xce, 0x40, 0xaa, 0x7e, 0x7c, 0x0a, 0xf5, 0x7c, 0xac, 0xef, 0xa4, 0x0c,
            0x9f, 0x14, 0xb7, 0x1a, 0x4b, 0x34, 0x56, 0xa6, 0x3e, 0x16, 0x2e, 0xc7, 0xd8, 0xd1,
            0x0b, 0x8f, 0xfb, 0x18, 0x10, 0xd7, 0x10, 0x01, 0xb6, 0x18, 0x69, 0x6a, 0xfc, 0xfd,
            0x0c, 0xdd, 0xcc, 0x83, 0xc7, 0xe7, 0x7f, 0x11, 0xa6, 0x49, 0xd7, 0x9a, 0xcd, 0xc3,
            0x35, 0x4e, 0x96, 0x35, 0xff, 0x13, 0x7e, 0x92, 0x99, 0x33, 0xa0, 0xbd, 0x6f, 0x53,
            0x77, 0xef, 0xa1, 0x05, 0xa3, 0xa4, 0x26, 0x6b, 0x7c, 0x0d, 0x08, 0x9d, 0x08, 0xf1,
            0xe8, 0x55, 0xcc, 0x32, 0xb1, 0x5b, 0x93, 0x78, 0x4a, 0x36, 0xe5, 0x6a, 0x76, 0xcc,
            0x64, 0xbc, 0x84, 0x77,
        ]
    );

    test_keystream!(
        test_2,
        [0x000004000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0],
        [0x0, 0x0],
        [
            0x01, 0xf1, 0x91, 0xc3, 0xa1, 0xf2, 0xcc, 0x6e, 0xbe, 0xd7, 0x80, 0x95, 0xa0, 0x5e,
            0x06, 0x2e, 0x12, 0x28, 0x15, 0x4a, 0xf6, 0xba, 0xe8, 0x0a, 0x0e, 0x1a, 0x61, 0xdf,
            0x2a, 0xe1, 0x5f, 0xbc, 0xc3, 0x72, 0x86, 0x44, 0x0f, 0x66, 0x78, 0x07, 0x61, 0x41,
            0x3f, 0x23, 0xb0, 0xc2, 0xc9, 0xe4, 0x67, 0x8c, 0x62, 0x8c, 0x5e, 0x7f, 0xb4, 0x8c,
            0x6e, 0xc1, 0xd8, 0x2d, 0x47, 0x11, 0x7d, 0x9f, 0x86, 0xd6, 0xf8, 0x24, 0xd5, 0x80,
            0x12, 0xa1, 0x4a, 0x19, 0x85, 0x8c, 0xfe, 0x13, 0x7d, 0x76, 0x8e, 0x77, 0x59, 0x7b,
            0x96, 0xa4, 0x28, 0x5d, 0x6b, 0x65, 0xd8, 0x8a, 0x7f, 0x1a, 0x87, 0x78, 0x4b, 0xf1,
            0xa3, 0xe4, 0x4f, 0xc9, 0xd3, 0x52, 0x5d, 0xdc, 0x78, 0x4f, 0x5d, 0x99, 0xba, 0x22,
            0x27, 0x12, 0x42, 0x01, 0x81, 0xca, 0xba, 0xb0, 0x0c, 0x4b, 0x91, 0xaa, 0xed, 0xff,
            0x52, 0x1c, 0x28, 0x7a, 0x9d, 0xb3, 0xc4, 0xee, 0xdc, 0xc9, 0x60, 0x55, 0x25, 0x1b,
            0x73, 0xed, 0x36, 0x1b, 0xa7, 0x27, 0xc2, 0xf3, 0x26, 0xef, 0x69, 0x44, 0xf9, 0x44,
            0x9f, 0xb7, 0xa3, 0xdd, 0xc3, 0x96, 0xa8, 0x8d, 0x9d, 0x0d, 0x85, 0x3f, 0xad, 0xe3,
            0x65, 0xf8, 0x27, 0x89, 0xd5, 0x7f, 0x9b, 0x40, 0x10, 0xf9, 0x63, 0xbc, 0x49, 0x8f,
            0x17, 0x6a, 0x93, 0xfd, 0x51, 0x72, 0x3f, 0xcd, 0x4d, 0x55, 0xe0, 0xd6, 0x2e, 0x2e,
            0x3b, 0x37, 0xfd, 0xd9, 0x06, 0xc9, 0x34, 0xfa, 0xa3, 0x5d, 0x5e, 0x8a, 0x89, 0xa5,
            0x17, 0xdd, 0x0f, 0x24, 0xcf, 0x33, 0xde, 0x84, 0x95, 0xc5, 0xff, 0x24, 0xf4, 0xb1,
            0x47, 0x6b, 0x3e, 0x82, 0x6a, 0x1c, 0x90, 0xd7, 0x45, 0x07, 0xc3, 0x99, 0x1c, 0xef,
            0x40, 0x67, 0xe3, 0x16, 0xa0, 0x4b, 0x97, 0xae, 0xff, 0xa5, 0xe9, 0xd1, 0xf3, 0x3c,
            0xb0, 0x60, 0x9b, 0x9e
        ]
    );
}
