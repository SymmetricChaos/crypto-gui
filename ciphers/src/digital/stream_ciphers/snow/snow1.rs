use utils::byte_formatting::ByteFormat;

const SBOX0: [u32; 256] = [
    0x40408000, 0x00408000, 0x40408004, 0x10010844, 0x00410804, 0x10408804, 0x40000804, 0x00410040,
    0x50018000, 0x10018804, 0x10418804, 0x40408804, 0x10010840, 0x50018044, 0x50400044, 0x40408040,
    0x50010044, 0x00418040, 0x50410040, 0x40010040, 0x10000000, 0x10410844, 0x40008000, 0x40400844,
    0x00018000, 0x40010004, 0x10010804, 0x10418840, 0x40410840, 0x00410004, 0x40410044, 0x00000844,
    0x00418004, 0x00010000, 0x40008844, 0x40410000, 0x00010840, 0x00400044, 0x10010000, 0x50400040,
    0x40000044, 0x10018004, 0x00410844, 0x50010000, 0x00018040, 0x00008800, 0x50418844, 0x10000804,
    0x00400840, 0x50008804, 0x50010840, 0x50018800, 0x40018840, 0x10408844, 0x50000840, 0x10000844,
    0x10018844, 0x00400040, 0x10400804, 0x50010040, 0x10418844, 0x50008000, 0x10008800, 0x40400000,
    0x00008004, 0x00408004, 0x10008040, 0x00408040, 0x00400004, 0x00008000, 0x50418004, 0x00000004,
    0x50408800, 0x40000000, 0x10000044, 0x10000800, 0x40418840, 0x00008044, 0x00408044, 0x10400800,
    0x50410000, 0x40010000, 0x10008844, 0x40018000, 0x50000044, 0x40408800, 0x40418844, 0x50410840,
    0x00418804, 0x10410800, 0x40400840, 0x10410044, 0x10018040, 0x50008800, 0x40400044, 0x00418000,
    0x10400044, 0x40000844, 0x50008840, 0x00000040, 0x00018004, 0x00410000, 0x10408840, 0x50418840,
    0x40000004, 0x50018844, 0x10400840, 0x00418044, 0x00400800, 0x10400844, 0x40418000, 0x10408004,
    0x50408004, 0x50400840, 0x50018840, 0x00008840, 0x00010004, 0x50010804, 0x40400800, 0x00408840,
    0x10018044, 0x40008044, 0x50408840, 0x50008040, 0x10010040, 0x40018004, 0x50000800, 0x10408040,
    0x40000840, 0x40400004, 0x00410800, 0x10410000, 0x50410800, 0x50400804, 0x40410040, 0x10010004,
    0x10018000, 0x50010004, 0x00018044, 0x50018040, 0x50418800, 0x40010044, 0x50408040, 0x10018800,
    0x50400004, 0x10408000, 0x10410840, 0x10408044, 0x00000804, 0x40418800, 0x00418840, 0x40000040,
    0x00410044, 0x10410004, 0x40018804, 0x10400000, 0x00408844, 0x40008804, 0x40008800, 0x00000000,
    0x00008804, 0x40400040, 0x10008044, 0x50408844, 0x50010800, 0x40008004, 0x00400844, 0x50400000,
    0x00000800, 0x50410044, 0x00010804, 0x50000040, 0x40408840, 0x10418044, 0x40408044, 0x50008844,
    0x40410800, 0x00018840, 0x40410004, 0x50400844, 0x10400040, 0x00418800, 0x40008040, 0x40418004,
    0x50008004, 0x10018840, 0x10010044, 0x00010044, 0x10000040, 0x50410004, 0x40010800, 0x10400004,
    0x40410844, 0x50018804, 0x10008804, 0x10418040, 0x10008000, 0x50000804, 0x10408800, 0x00408804,
    0x40418044, 0x00410840, 0x50418000, 0x00000044, 0x50418044, 0x10000004, 0x50000844, 0x40018040,
    0x50408044, 0x00000840, 0x50408000, 0x40408844, 0x40010844, 0x40018044, 0x00010040, 0x00400804,
    0x10418000, 0x00010844, 0x00008040, 0x50400800, 0x40010804, 0x50008044, 0x50000000, 0x40008840,
    0x50000004, 0x10008840, 0x40010840, 0x00408800, 0x10410804, 0x50018004, 0x40418804, 0x40410804,
    0x50010844, 0x10008004, 0x40018844, 0x00018844, 0x10418004, 0x00010800, 0x00008844, 0x50408804,
    0x10010800, 0x50410844, 0x40018800, 0x50418804, 0x50418040, 0x10418800, 0x50410804, 0x00400000,
    0x40400804, 0x10410040, 0x40418040, 0x40000800, 0x00418844, 0x00018804, 0x10000840, 0x00018800,
];

const SBOX1: [u32; 256] = [
    0x80080200, 0x00080200, 0x80080202, 0x04200112, 0x00280102, 0x04080302, 0x80000102, 0x00280010,
    0x84200200, 0x04200302, 0x04280302, 0x80080302, 0x04200110, 0x84200212, 0x84080012, 0x80080210,
    0x84200012, 0x00280210, 0x84280010, 0x80200010, 0x04000000, 0x04280112, 0x80000200, 0x80080112,
    0x00200200, 0x80200002, 0x04200102, 0x04280310, 0x80280110, 0x00280002, 0x80280012, 0x00000112,
    0x00280202, 0x00200000, 0x80000312, 0x80280000, 0x00200110, 0x00080012, 0x04200000, 0x84080010,
    0x80000012, 0x04200202, 0x00280112, 0x84200000, 0x00200210, 0x00000300, 0x84280312, 0x04000102,
    0x00080110, 0x84000302, 0x84200110, 0x84200300, 0x80200310, 0x04080312, 0x84000110, 0x04000112,
    0x04200312, 0x00080010, 0x04080102, 0x84200010, 0x04280312, 0x84000200, 0x04000300, 0x80080000,
    0x00000202, 0x00080202, 0x04000210, 0x00080210, 0x00080002, 0x00000200, 0x84280202, 0x00000002,
    0x84080300, 0x80000000, 0x04000012, 0x04000100, 0x80280310, 0x00000212, 0x00080212, 0x04080100,
    0x84280000, 0x80200000, 0x04000312, 0x80200200, 0x84000012, 0x80080300, 0x80280312, 0x84280110,
    0x00280302, 0x04280100, 0x80080110, 0x04280012, 0x04200210, 0x84000300, 0x80080012, 0x00280200,
    0x04080012, 0x80000112, 0x84000310, 0x00000010, 0x00200202, 0x00280000, 0x04080310, 0x84280310,
    0x80000002, 0x84200312, 0x04080110, 0x00280212, 0x00080100, 0x04080112, 0x80280200, 0x04080202,
    0x84080202, 0x84080110, 0x84200310, 0x00000310, 0x00200002, 0x84200102, 0x80080100, 0x00080310,
    0x04200212, 0x80000212, 0x84080310, 0x84000210, 0x04200010, 0x80200202, 0x84000100, 0x04080210,
    0x80000110, 0x80080002, 0x00280100, 0x04280000, 0x84280100, 0x84080102, 0x80280010, 0x04200002,
    0x04200200, 0x84200002, 0x00200212, 0x84200210, 0x84280300, 0x80200012, 0x84080210, 0x04200300,
    0x84080002, 0x04080200, 0x04280110, 0x04080212, 0x00000102, 0x80280300, 0x00280310, 0x80000010,
    0x00280012, 0x04280002, 0x80200302, 0x04080000, 0x00080312, 0x80000302, 0x80000300, 0x00000000,
    0x00000302, 0x80080010, 0x04000212, 0x84080312, 0x84200100, 0x80000202, 0x00080112, 0x84080000,
    0x00000100, 0x84280012, 0x00200102, 0x84000010, 0x80080310, 0x04280212, 0x80080212, 0x84000312,
    0x80280100, 0x00200310, 0x80280002, 0x84080112, 0x04080010, 0x00280300, 0x80000210, 0x80280202,
    0x84000202, 0x04200310, 0x04200012, 0x00200012, 0x04000010, 0x84280002, 0x80200100, 0x04080002,
    0x80280112, 0x84200302, 0x04000302, 0x04280210, 0x04000200, 0x84000102, 0x04080300, 0x00080302,
    0x80280212, 0x00280110, 0x84280200, 0x00000012, 0x84280212, 0x04000002, 0x84000112, 0x80200210,
    0x84080212, 0x00000110, 0x84080200, 0x80080312, 0x80200112, 0x80200212, 0x00200010, 0x00080102,
    0x04280200, 0x00200112, 0x00000210, 0x84080100, 0x80200102, 0x84000212, 0x84000000, 0x80000310,
    0x84000002, 0x04000310, 0x80200110, 0x00080300, 0x04280102, 0x84200202, 0x80280302, 0x80280102,
    0x84200112, 0x04000202, 0x80200312, 0x00200312, 0x04280202, 0x00200100, 0x00000312, 0x84080302,
    0x04200100, 0x84280112, 0x80200300, 0x84280302, 0x84280210, 0x04280300, 0x84280102, 0x00080000,
    0x80080102, 0x04280010, 0x80280210, 0x80000100, 0x00280312, 0x00200302, 0x04000110, 0x00200300,
];

const SBOX2: [u32; 256] = [
    0x08801000, 0x00801000, 0x08801080, 0x020420a0, 0x00842080, 0x02803080, 0x08002080, 0x00840020,
    0x0a041000, 0x02043080, 0x02843080, 0x08803080, 0x02042020, 0x0a0410a0, 0x0a8000a0, 0x08801020,
    0x0a0400a0, 0x00841020, 0x0a840020, 0x08040020, 0x02000000, 0x028420a0, 0x08001000, 0x088020a0,
    0x00041000, 0x08040080, 0x02042080, 0x02843020, 0x08842020, 0x00840080, 0x088400a0, 0x000020a0,
    0x00841080, 0x00040000, 0x080030a0, 0x08840000, 0x00042020, 0x008000a0, 0x02040000, 0x0a800020,
    0x080000a0, 0x02041080, 0x008420a0, 0x0a040000, 0x00041020, 0x00003000, 0x0a8430a0, 0x02002080,
    0x00802020, 0x0a003080, 0x0a042020, 0x0a043000, 0x08043020, 0x028030a0, 0x0a002020, 0x020020a0,
    0x020430a0, 0x00800020, 0x02802080, 0x0a040020, 0x028430a0, 0x0a001000, 0x02003000, 0x08800000,
    0x00001080, 0x00801080, 0x02001020, 0x00801020, 0x00800080, 0x00001000, 0x0a841080, 0x00000080,
    0x0a803000, 0x08000000, 0x020000a0, 0x02002000, 0x08843020, 0x000010a0, 0x008010a0, 0x02802000,
    0x0a840000, 0x08040000, 0x020030a0, 0x08041000, 0x0a0000a0, 0x08803000, 0x088430a0, 0x0a842020,
    0x00843080, 0x02842000, 0x08802020, 0x028400a0, 0x02041020, 0x0a003000, 0x088000a0, 0x00841000,
    0x028000a0, 0x080020a0, 0x0a003020, 0x00000020, 0x00041080, 0x00840000, 0x02803020, 0x0a843020,
    0x08000080, 0x0a0430a0, 0x02802020, 0x008410a0, 0x00802000, 0x028020a0, 0x08841000, 0x02801080,
    0x0a801080, 0x0a802020, 0x0a043020, 0x00003020, 0x00040080, 0x0a042080, 0x08802000, 0x00803020,
    0x020410a0, 0x080010a0, 0x0a803020, 0x0a001020, 0x02040020, 0x08041080, 0x0a002000, 0x02801020,
    0x08002020, 0x08800080, 0x00842000, 0x02840000, 0x0a842000, 0x0a802080, 0x08840020, 0x02040080,
    0x02041000, 0x0a040080, 0x000410a0, 0x0a041020, 0x0a843000, 0x080400a0, 0x0a801020, 0x02043000,
    0x0a800080, 0x02801000, 0x02842020, 0x028010a0, 0x00002080, 0x08843000, 0x00843020, 0x08000020,
    0x008400a0, 0x02840080, 0x08043080, 0x02800000, 0x008030a0, 0x08003080, 0x08003000, 0x00000000,
    0x00003080, 0x08800020, 0x020010a0, 0x0a8030a0, 0x0a042000, 0x08001080, 0x008020a0, 0x0a800000,
    0x00002000, 0x0a8400a0, 0x00042080, 0x0a000020, 0x08803020, 0x028410a0, 0x088010a0, 0x0a0030a0,
    0x08842000, 0x00043020, 0x08840080, 0x0a8020a0, 0x02800020, 0x00843000, 0x08001020, 0x08841080,
    0x0a001080, 0x02043020, 0x020400a0, 0x000400a0, 0x02000020, 0x0a840080, 0x08042000, 0x02800080,
    0x088420a0, 0x0a043080, 0x02003080, 0x02841020, 0x02001000, 0x0a002080, 0x02803000, 0x00803080,
    0x088410a0, 0x00842020, 0x0a841000, 0x000000a0, 0x0a8410a0, 0x02000080, 0x0a0020a0, 0x08041020,
    0x0a8010a0, 0x00002020, 0x0a801000, 0x088030a0, 0x080420a0, 0x080410a0, 0x00040020, 0x00802080,
    0x02841000, 0x000420a0, 0x00001020, 0x0a802000, 0x08042080, 0x0a0010a0, 0x0a000000, 0x08003020,
    0x0a000080, 0x02003020, 0x08042020, 0x00803000, 0x02842080, 0x0a041080, 0x08843080, 0x08842080,
    0x0a0420a0, 0x02001080, 0x080430a0, 0x000430a0, 0x02841080, 0x00042000, 0x000030a0, 0x0a803080,
    0x02042000, 0x0a8420a0, 0x08043000, 0x0a843080, 0x0a841020, 0x02843000, 0x0a842080, 0x00800000,
    0x08802080, 0x02840020, 0x08841020, 0x08002000, 0x008430a0, 0x00043080, 0x02002020, 0x00043000,
];

const SBOX3: [u32; 256] = [
    0x20024000, 0x00024000, 0x20024008, 0x01100409, 0x00120408, 0x01024408, 0x20000408, 0x00120001,
    0x21104000, 0x01104408, 0x01124408, 0x20024408, 0x01100401, 0x21104009, 0x21020009, 0x20024001,
    0x21100009, 0x00124001, 0x21120001, 0x20100001, 0x01000000, 0x01120409, 0x20004000, 0x20020409,
    0x00104000, 0x20100008, 0x01100408, 0x01124401, 0x20120401, 0x00120008, 0x20120009, 0x00000409,
    0x00124008, 0x00100000, 0x20004409, 0x20120000, 0x00100401, 0x00020009, 0x01100000, 0x21020001,
    0x20000009, 0x01104008, 0x00120409, 0x21100000, 0x00104001, 0x00004400, 0x21124409, 0x01000408,
    0x00020401, 0x21004408, 0x21100401, 0x21104400, 0x20104401, 0x01024409, 0x21000401, 0x01000409,
    0x01104409, 0x00020001, 0x01020408, 0x21100001, 0x01124409, 0x21004000, 0x01004400, 0x20020000,
    0x00004008, 0x00024008, 0x01004001, 0x00024001, 0x00020008, 0x00004000, 0x21124008, 0x00000008,
    0x21024400, 0x20000000, 0x01000009, 0x01000400, 0x20124401, 0x00004009, 0x00024009, 0x01020400,
    0x21120000, 0x20100000, 0x01004409, 0x20104000, 0x21000009, 0x20024400, 0x20124409, 0x21120401,
    0x00124408, 0x01120400, 0x20020401, 0x01120009, 0x01104001, 0x21004400, 0x20020009, 0x00124000,
    0x01020009, 0x20000409, 0x21004401, 0x00000001, 0x00104008, 0x00120000, 0x01024401, 0x21124401,
    0x20000008, 0x21104409, 0x01020401, 0x00124009, 0x00020400, 0x01020409, 0x20124000, 0x01024008,
    0x21024008, 0x21020401, 0x21104401, 0x00004401, 0x00100008, 0x21100408, 0x20020400, 0x00024401,
    0x01104009, 0x20004009, 0x21024401, 0x21004001, 0x01100001, 0x20104008, 0x21000400, 0x01024001,
    0x20000401, 0x20020008, 0x00120400, 0x01120000, 0x21120400, 0x21020408, 0x20120001, 0x01100008,
    0x01104000, 0x21100008, 0x00104009, 0x21104001, 0x21124400, 0x20100009, 0x21024001, 0x01104400,
    0x21020008, 0x01024000, 0x01120401, 0x01024009, 0x00000408, 0x20124400, 0x00124401, 0x20000001,
    0x00120009, 0x01120008, 0x20104408, 0x01020000, 0x00024409, 0x20004408, 0x20004400, 0x00000000,
    0x00004408, 0x20020001, 0x01004009, 0x21024409, 0x21100400, 0x20004008, 0x00020409, 0x21020000,
    0x00000400, 0x21120009, 0x00100408, 0x21000001, 0x20024401, 0x01124009, 0x20024009, 0x21004409,
    0x20120400, 0x00104401, 0x20120008, 0x21020409, 0x01020001, 0x00124400, 0x20004001, 0x20124008,
    0x21004008, 0x01104401, 0x01100009, 0x00100009, 0x01000001, 0x21120008, 0x20100400, 0x01020008,
    0x20120409, 0x21104408, 0x01004408, 0x01124001, 0x01004000, 0x21000408, 0x01024400, 0x00024408,
    0x20124009, 0x00120401, 0x21124000, 0x00000009, 0x21124009, 0x01000008, 0x21000409, 0x20104001,
    0x21024009, 0x00000401, 0x21024000, 0x20024409, 0x20100409, 0x20104009, 0x00100001, 0x00020408,
    0x01124000, 0x00100409, 0x00004001, 0x21020400, 0x20100408, 0x21004009, 0x21000000, 0x20004401,
    0x21000008, 0x01004401, 0x20100401, 0x00024400, 0x01120408, 0x21104008, 0x20124408, 0x20120408,
    0x21100409, 0x01004008, 0x20104409, 0x00104409, 0x01124008, 0x00100400, 0x00004409, 0x21024408,
    0x01100400, 0x21120409, 0x20104400, 0x21124408, 0x21124001, 0x01124400, 0x21120408, 0x00020000,
    0x20020408, 0x01120001, 0x20124001, 0x20000400, 0x00124409, 0x00104408, 0x01000401, 0x00104400,
];

fn sbox(n: u32) -> u32 {
    SBOX0[n as usize & 0xff]
        | SBOX1[(n as usize) >> 8 & 0xff]
        | SBOX2[(n as usize) >> 16 & 0xff]
        | SBOX3[(n as usize) >> 24 & 0xff]
}

fn alpha(n: u32) -> u32 {
    if n & 0x80000000 == 1 {
        (n << 1) ^ 0x20108403
    } else {
        n << 1
    }
}

pub struct Fsm {
    r1: u32,
    r2: u32,
}

impl Fsm {
    pub fn step(&mut self, s1: u32) -> u32 {
        let out = s1.wrapping_add(self.r1) ^ self.r2;
        let temp = out.wrapping_add(self.r2).rotate_left(7) ^ self.r1;
        self.r2 = sbox(self.r1);
        self.r1 = temp;
        out
    }
}

pub struct Snow1 {
    pub input_format: ByteFormat,
    pub output_format: ByteFormat,
    words: [u32; 16],
    fsm: Fsm,
}

impl Default for Snow1 {
    fn default() -> Self {
        Self {
            input_format: ByteFormat::Hex,
            output_format: ByteFormat::Hex,
            words: [0; 16],
            fsm: Fsm { r1: 0, r2: 0 },
        }
    }
}

impl Snow1 {
    pub fn with_key_128(key: [u32; 4]) -> Self {
        Self::with_key_and_iv_128(key, [0; 2])
    }

    pub fn with_key_and_iv_128(key: [u32; 4], iv: [u32; 2]) -> Self {
        let mut s = Snow1::default();
        s.words[0] = key[0] ^ iv[0];
        s.words[1] = key[1];
        s.words[2] = key[2];
        s.words[3] = key[3] ^ iv[1];

        s.words[4] = key[0] ^ 1;
        s.words[5] = key[1] ^ 1;
        s.words[6] = key[2] ^ 1;
        s.words[7] = key[3] ^ 1;

        s.words[8] = key[0];
        s.words[9] = key[1];
        s.words[10] = key[2];
        s.words[11] = key[3];

        s.words[12] = key[0] ^ 1;
        s.words[13] = key[1] ^ 1;
        s.words[14] = key[2] ^ 1;
        s.words[15] = key[3] ^ 1;

        s.fsm.r1 = 0;
        s.fsm.r2 = 0;

        for _ in 0..32 {
            s.next_u32();
        }

        s
    }

    pub fn with_key_256(mut self, key: [u32; 8]) -> Self {
        Self::with_key_and_iv_256(key, [0; 2])
    }

    pub fn with_key_and_iv_256(key: [u32; 8], iv: [u32; 2]) -> Self {
        let mut s = Snow1::default();
        s.words[0] = key[0] ^ iv[0];
        s.words[1] = key[1];
        s.words[2] = key[2];
        s.words[3] = key[3];
        s.words[4] = key[4] ^ iv[1];
        s.words[5] = key[5];
        s.words[6] = key[6];
        s.words[7] = key[7];

        s.words[8] = key[0] ^ 1;
        s.words[9] = key[1] ^ 1;
        s.words[10] = key[2] ^ 1;
        s.words[11] = key[3] ^ 1;
        s.words[12] = key[4] ^ 1;
        s.words[13] = key[5] ^ 1;
        s.words[14] = key[6] ^ 1;
        s.words[15] = key[7] ^ 1;

        s.fsm.r1 = 0;
        s.fsm.r2 = 0;

        for _ in 0..32 {
            s.next_u32();
        }

        s
    }

    pub fn next_u32(&mut self) -> u32 {
        let t = alpha(self.words[6] ^ self.words[12] ^ self.words[15]);
        self.words.rotate_right(1);
        self.words[0] = t;
        self.words[15] ^ self.fsm.step(self.words[0])
    }

    pub fn encrypt_bytes(&self, bytes: &mut [u8]) {
        todo!()
    }

    pub fn encrypt_bytes_mut(&mut self, bytes: &mut [u8]) {
        todo!()
    }
}

crate::impl_cipher_for_stream_cipher!(Snow1);
