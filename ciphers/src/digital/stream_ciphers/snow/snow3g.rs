use utils::byte_formatting::xor_into_bytes;

// https://www.gsma.com/about-us/wp-content/uploads/2014/12/snow3gspec.pdf

const SR: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

const SQ: [u8; 256] = [
    0x25, 0x24, 0x73, 0x67, 0xD7, 0xAE, 0x5C, 0x30, 0xA4, 0xEE, 0x6E, 0xCB, 0x7D, 0xB5, 0x82, 0xDB,
    0xE4, 0x8E, 0x48, 0x49, 0x4F, 0x5D, 0x6A, 0x78, 0x70, 0x88, 0xE8, 0x5F, 0x5E, 0x84, 0x65, 0xE2,
    0xD8, 0xE9, 0xCC, 0xED, 0x40, 0x2F, 0x11, 0x28, 0x57, 0xD2, 0xAC, 0xE3, 0x4A, 0x15, 0x1B, 0xB9,
    0xB2, 0x80, 0x85, 0xA6, 0x2E, 0x02, 0x47, 0x29, 0x07, 0x4B, 0x0E, 0xC1, 0x51, 0xAA, 0x89, 0xD4,
    0xCA, 0x01, 0x46, 0xB3, 0xEF, 0xDD, 0x44, 0x7B, 0xC2, 0x7F, 0xBE, 0xC3, 0x9F, 0x20, 0x4C, 0x64,
    0x83, 0xA2, 0x68, 0x42, 0x13, 0xB4, 0x41, 0xCD, 0xBA, 0xC6, 0xBB, 0x6D, 0x4D, 0x71, 0x21, 0xF4,
    0x8D, 0xB0, 0xE5, 0x93, 0xFE, 0x8F, 0xE6, 0xCF, 0x43, 0x45, 0x31, 0x22, 0x37, 0x36, 0x96, 0xFA,
    0xBC, 0x0F, 0x08, 0x52, 0x1D, 0x55, 0x1A, 0xC5, 0x4E, 0x23, 0x69, 0x7A, 0x92, 0xFF, 0x5B, 0x5A,
    0xEB, 0x9A, 0x1C, 0xA9, 0xD1, 0x7E, 0x0D, 0xFC, 0x50, 0x8A, 0xB6, 0x62, 0xF5, 0x0A, 0xF8, 0xDC,
    0x03, 0x3C, 0x0C, 0x39, 0xF1, 0xB8, 0xF3, 0x3D, 0xF2, 0xD5, 0x97, 0x66, 0x81, 0x32, 0xA0, 0x00,
    0x06, 0xCE, 0xF6, 0xEA, 0xB7, 0x17, 0xF7, 0x8C, 0x79, 0xD6, 0xA7, 0xBF, 0x8B, 0x3F, 0x1F, 0x53,
    0x63, 0x75, 0x35, 0x2C, 0x60, 0xFD, 0x27, 0xD3, 0x94, 0xA5, 0x7C, 0xA1, 0x05, 0x58, 0x2D, 0xBD,
    0xD9, 0xC7, 0xAF, 0x6B, 0x54, 0x0B, 0xE0, 0x38, 0x04, 0xC8, 0x9D, 0xE7, 0x14, 0xB1, 0x87, 0x9C,
    0xDF, 0x6F, 0xF9, 0xDA, 0x2A, 0xC4, 0x59, 0x16, 0x74, 0x91, 0xAB, 0x26, 0x61, 0x76, 0x34, 0x2B,
    0xAD, 0x99, 0xFB, 0x72, 0xEC, 0x33, 0x12, 0xDE, 0x98, 0x3B, 0xC0, 0x9B, 0x3E, 0x18, 0x10, 0x3A,
    0x56, 0xE1, 0x77, 0xC9, 0x1E, 0x9E, 0x95, 0xA3, 0x90, 0x19, 0xA8, 0x6C, 0x09, 0xD0, 0xF0, 0x86,
];

fn mul_x(v: u8, c: u8) -> u8 {
    if v >> 7 == 1 {
        (v << 1) ^ c
    } else {
        v << 1
    }
}

fn mul_x_pow(v: u8, c: u8, i: u8) -> u8 {
    if i == 0 {
        v
    } else {
        mul_x(mul_x_pow(v, c, i - 1), c)
    }
}

fn mul_alpha(c: u8) -> u32 {
    let r0 = mul_x_pow(c, 0xa9, 23);
    let r1 = mul_x_pow(c, 0xa9, 245);
    let r2 = mul_x_pow(c, 0xa9, 48);
    let r3 = mul_x_pow(c, 0xa9, 239);
    u32::from_be_bytes([r0, r1, r2, r3])
}

fn div_alpha(c: u8) -> u32 {
    let r0 = mul_x_pow(c, 0xa9, 16);
    let r1 = mul_x_pow(c, 0xa9, 39);
    let r2 = mul_x_pow(c, 0xa9, 6);
    let r3 = mul_x_pow(c, 0xa9, 64);
    u32::from_be_bytes([r0, r1, r2, r3])
}

fn sbox1(n: u32) -> u32 {
    let [w0, w1, w2, w3] = n.to_be_bytes().map(|f| f as usize);
    let r0 = mul_x(SR[w0], 0x1B) ^ SR[w1] ^ SR[w2] ^ (mul_x(SR[w3], 0x1B) ^ SR[w3]);
    let r1 = (mul_x(SR[w0], 0x1B) ^ SR[w0]) ^ mul_x(SR[w1], 0x1B) ^ SR[w2] ^ SR[w3];
    let r2 = SR[w0] ^ (mul_x(SR[w1], 0x1B) ^ SR[w1]) ^ mul_x(SR[w2], 0x1B) ^ SR[w3];
    let r3 = SR[w0] ^ SR[w1] ^ (mul_x(SR[w2], 0x1B) ^ SR[w2]) ^ mul_x(SR[w3], 0x1B);
    u32::from_be_bytes([r0, r1, r2, r3])
}

fn sbox2(n: u32) -> u32 {
    let [w0, w1, w2, w3] = n.to_be_bytes().map(|f| f as usize);
    let r0 = mul_x(SQ[w0], 0x69) ^ SQ[w1] ^ SQ[w2] ^ (mul_x(SQ[w3], 0x69) ^ SQ[w3]);
    let r1 = (mul_x(SQ[w0], 0x69) ^ SQ[w0]) ^ mul_x(SQ[w1], 0x69) ^ SQ[w2] ^ SQ[w3];
    let r2 = SQ[w0] ^ (mul_x(SQ[w1], 0x69) ^ SQ[w1]) ^ mul_x(SQ[w2], 0x69) ^ SQ[w3];
    let r3 = SQ[w0] ^ SQ[w1] ^ (mul_x(SQ[w2], 0x69) ^ SQ[w2]) ^ mul_x(SQ[w3], 0x69);
    u32::from_be_bytes([r0, r1, r2, r3])
}

#[derive(Debug, Clone)]
pub struct Snow3G {
    words: [u32; 16],
    r1: u32,
    r2: u32,
    r3: u32,
}

impl Default for Snow3G {
    fn default() -> Self {
        Self {
            words: [0; 16],
            r1: 0,
            r2: 0,
            r3: 0,
        }
    }
}

impl Snow3G {
    pub fn with_key_and_iv(key: [u32; 4], iv: [u32; 4]) -> Self {
        let mut s = Snow3G::default();
        s.words[15] = key[3] ^ iv[0];
        s.words[14] = key[2];
        s.words[13] = key[1];
        s.words[12] = key[0] ^ iv[1];

        s.words[11] = !key[3];
        s.words[10] = !(key[2] ^ iv[2]);
        s.words[9] = !(key[1] ^ iv[3]);
        s.words[8] = !key[0];

        s.words[7] = key[3];
        s.words[6] = key[2];
        s.words[5] = key[1];
        s.words[4] = key[0];

        s.words[3] = !key[3];
        s.words[2] = !key[2];
        s.words[1] = !key[1];
        s.words[0] = !key[0];

        for _ in 0..32 {
            s.clock_iv();
        }
        // Discard a single keystream output
        s.clock_k();

        s
    }

    fn fsm(&mut self) -> u32 {
        let f = self.words[15].wrapping_add(self.r1) ^ self.r2;
        let r = self.r2.wrapping_add(self.r3 ^ self.words[5]);
        self.r3 = sbox2(self.r2);
        self.r2 = sbox1(self.r1);
        self.r1 = r;
        f
    }

    fn clock_iv(&mut self) {
        let f = self.fsm();
        let [s0, s1, s2, s3] = self.words[0].to_be_bytes();
        let [t0, t1, t2, t3] = self.words[11].to_be_bytes();
        let v = u32::from_be_bytes([s1, s2, s3, 0])
            ^ (mul_alpha(s0) ^ self.words[2] ^ u32::from_be_bytes([0, t0, t1, t2]))
            ^ (div_alpha(t3) ^ f);

        self.words.rotate_left(1);
        self.words[15] = v;
    }

    fn clock_k(&mut self) -> u32 {
        let out = self.fsm() ^ self.words[0];
        let [s0, s1, s2, s3] = self.words[0].to_be_bytes();
        let [t0, t1, t2, t3] = self.words[11].to_be_bytes();
        let v = u32::from_be_bytes([s1, s2, s3, 0])
            ^ (mul_alpha(s0) ^ self.words[2] ^ u32::from_be_bytes([0, t0, t1, t2]))
            ^ div_alpha(t3);

        self.words.rotate_left(1);
        self.words[15] = v;

        out
    }

    pub fn encrypt_bytes_mut(&mut self, bytes: &mut [u8]) {
        let mut keystream = Vec::new();
        for _ in 0..(bytes.len() / 4) {
            keystream.extend(self.clock_k().to_be_bytes());
        }
        xor_into_bytes(bytes, &keystream);
    }

    pub fn encrypt_bytes(&self, bytes: &mut [u8]) {
        self.clone().encrypt_bytes_mut(bytes);
    }
}

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn mul() {
        assert_eq!(mul_x(0x69, 0x1b), 0xd2); // pretty sure the reference example is wrong
        assert_eq!(mul_x(0x96, 0x1b), 0x37);
    }

    #[test]
    fn gsma1() {
        let mut cipher = Snow3G::with_key_and_iv(
            [0x2BD6459F, 0x82C5B300, 0x952C4910, 0x4881FF48],
            [0xEA024714, 0xAD5C4D84, 0xDF1F9B25, 0x1C0BF45F],
        );

        assert_eq!(0xabee9704, cipher.clock_k());
        assert_eq!(0x7ac31373, cipher.clock_k());
    }

    #[test]
    fn gsma2() {
        let mut cipher = Snow3G::with_key_and_iv(
            [0x8CE33E2C, 0xC3C0B5FC, 0x1F3DE8A6, 0xDC66B1F3],
            [0xD3C5D592, 0x327FB11C, 0xDE551988, 0xCEB2F9B7],
        );

        assert_eq!(0xEFF8A342, cipher.clock_k());
        assert_eq!(0xF751480F, cipher.clock_k());
    }
}
